{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cppTemplate": {
		"prefix": "cppT",
		"scope": "cpp",
		"body": [
			"// ${1:link}",
			"",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"int main() {",
			"\t$0",
			"}"
		],
		"description": "C++ starter template"
	},
	"forLoop": {
		"prefix": "forT",
		"scope": "cpp",
		"body": [
			"for(int $varName = $startingInd; $varName < ${endingInd}; $varName++) {",
			"\t$0",
			"}",
		],
		"description": "For loop template"
	},
	"forAuto": {
		"prefix": "forAutoT",
		"scope": "cpp",
		"body": [
			"for(auto $varName: $iterator) {",
			"\t$0",
			"}",
		],
		"description": "For auto:it loop template"
	},
	"ifStatement": {
		"prefix": "ifT",
		"scope": "cpp",
		"body": [
			"if($condition) {",
			"\t$0",
			"}",
		],
		"description": "For auto:it loop template"
	},
	"elemAtInd": {
		"prefix": "elemAtInd",
		"scope": "cpp",
		"body": [
			"$iterable[$index]",
		],
		"description": "Get element at index i."
	},
	"scan": {
		"prefix": "scanfT",
		"scope": "cpp",
		"body": [
			"scanf(\"$data\", $varNames);",
		],
		"description": "Scanning template"
	},
	"IntMaxVal": {
		"prefix": "maxIntT",
		"scope": "cpp",
		"body": [
			"2147483647",
		],
		"description": "Max value of std::int"
	},
	"fastCinCout": {
		"prefix": "fastCinCout",
		"scope": "cpp",
		"body": [
			"ios::sync_with_stdio(0);",
			"cin.sync_with_stdio(0);",
			"cin.tie(0);",
		],
		"description": "fastio"
	},
	"pOptimize": {
		"prefix": "pOpT",
		"scope": "cpp",
		"body": [
			"#pragma GCC optimize \"Ofast\"",
		],
		"description": "Optimize compiler"
	},
	"quickScan": {
		"prefix": "quickScanT",
		"scope": "cpp",
		"body": [
			"#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)",
			"char _;",
		],
		"description": "quickScan"
	},
	"fastEndl": {
		"prefix": "fastEndl",
		"scope": "cpp",
		"body": [
			"#define endl '\\n'",
		],
		"description": "fast endl"
	},

	"Watch": {
		"prefix": "watchT",
		"scope": "cpp",
		"body": [
			"#define watch(x) cout << (#x) << \" is \" << (x) << endl;",
		],
		"description": "watch"
	},

	"Compare": {
		"prefix": "compareT",
		"scope": "cpp",
		"body": [
			"struct Compare {",
			"\t bool operator()(const pair<int, int>& l, const pair<int, int>& r) {",
			"\t\treturn l.second > r.second; ",
			"\t}",
			"}",
		]
	}
}
